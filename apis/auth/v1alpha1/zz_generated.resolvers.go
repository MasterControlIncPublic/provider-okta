/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ServerClaim.
func (mg *ServerClaim) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthServerID),
		Extract:      AuthServerID(),
		Reference:    mg.Spec.ForProvider.AuthServerIDRef,
		Selector:     mg.Spec.ForProvider.AuthServerIDSelector,
		To: reference.To{
			List:    &ServerList{},
			Managed: &Server{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthServerID")
	}
	mg.Spec.ForProvider.AuthServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServerClaimDefault.
func (mg *ServerClaimDefault) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthServerID),
		Extract:      AuthServerID(),
		Reference:    mg.Spec.ForProvider.AuthServerIDRef,
		Selector:     mg.Spec.ForProvider.AuthServerIDSelector,
		To: reference.To{
			List:    &ServerList{},
			Managed: &Server{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthServerID")
	}
	mg.Spec.ForProvider.AuthServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServerPolicy.
func (mg *ServerPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthServerID),
		Extract:      AuthServerID(),
		Reference:    mg.Spec.ForProvider.AuthServerIDRef,
		Selector:     mg.Spec.ForProvider.AuthServerIDSelector,
		To: reference.To{
			List:    &ServerList{},
			Managed: &Server{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthServerID")
	}
	mg.Spec.ForProvider.AuthServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthServerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServerPolicyRule.
func (mg *ServerPolicyRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthServerID),
		Extract:      AuthServerID(),
		Reference:    mg.Spec.ForProvider.AuthServerIDRef,
		Selector:     mg.Spec.ForProvider.AuthServerIDSelector,
		To: reference.To{
			List:    &ServerList{},
			Managed: &Server{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthServerID")
	}
	mg.Spec.ForProvider.AuthServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthServerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyID),
		Extract:      AuthServerPolicyId(),
		Reference:    mg.Spec.ForProvider.PolicyIDRef,
		Selector:     mg.Spec.ForProvider.PolicyIDSelector,
		To: reference.To{
			List:    &ServerPolicyList{},
			Managed: &ServerPolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyID")
	}
	mg.Spec.ForProvider.PolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServerScope.
func (mg *ServerScope) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthServerID),
		Extract:      AuthServerID(),
		Reference:    mg.Spec.ForProvider.AuthServerIDRef,
		Selector:     mg.Spec.ForProvider.AuthServerIDSelector,
		To: reference.To{
			List:    &ServerList{},
			Managed: &Server{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthServerID")
	}
	mg.Spec.ForProvider.AuthServerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthServerIDRef = rsp.ResolvedReference

	return nil
}
