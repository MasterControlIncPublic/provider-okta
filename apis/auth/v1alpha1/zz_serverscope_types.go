/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerScopeObservation struct {

	// Auth server ID
	AuthServerID *string `json:"authServerId,omitempty" tf:"auth_server_id,omitempty"`

	// EA Feature and thus it is simply ignored if the feature is off
	Consent *string `json:"consent,omitempty" tf:"consent,omitempty"`

	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// Description of the Auth Server Scope.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the end user displayed in a consent dialog box
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
	MetadataPublish *string `json:"metadataPublish,omitempty" tf:"metadata_publish,omitempty"`

	// Auth server scope name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether the scope optional
	Optional *bool `json:"optional,omitempty" tf:"optional,omitempty"`

	// Whether Okta created the Scope
	System *bool `json:"system,omitempty" tf:"system,omitempty"`
}

type ServerScopeParameters struct {

	// Auth server ID
	// +crossplane:generate:reference:type=github.com/healthcarecom/provider-okta/apis/auth/v1alpha1.Server
	// +crossplane:generate:reference:extractor=github.com/healthcarecom/provider-okta/apis/auth/v1alpha1.AuthServerID()
	// +kubebuilder:validation:Optional
	AuthServerID *string `json:"authServerId,omitempty" tf:"auth_server_id,omitempty"`

	// Reference to a Server in auth to populate authServerId.
	// +kubebuilder:validation:Optional
	AuthServerIDRef *v1.Reference `json:"authServerIdRef,omitempty" tf:"-"`

	// Selector for a Server in auth to populate authServerId.
	// +kubebuilder:validation:Optional
	AuthServerIDSelector *v1.Selector `json:"authServerIdSelector,omitempty" tf:"-"`

	// EA Feature and thus it is simply ignored if the feature is off
	// +kubebuilder:validation:Optional
	Consent *string `json:"consent,omitempty" tf:"consent,omitempty"`

	// A default scope will be returned in an access token when the client omits the scope parameter in a token request, provided this scope is allowed as part of the access policy rule.
	// +kubebuilder:validation:Optional
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// Description of the Auth Server Scope.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the end user displayed in a consent dialog box
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Whether to publish metadata or not, matching API type despite the fact it could just be a boolean
	// +kubebuilder:validation:Optional
	MetadataPublish *string `json:"metadataPublish,omitempty" tf:"metadata_publish,omitempty"`

	// Auth server scope name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether the scope optional
	// +kubebuilder:validation:Optional
	Optional *bool `json:"optional,omitempty" tf:"optional,omitempty"`
}

// ServerScopeSpec defines the desired state of ServerScope
type ServerScopeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerScopeParameters `json:"forProvider"`
}

// ServerScopeStatus defines the observed state of ServerScope.
type ServerScopeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerScopeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerScope is the Schema for the ServerScopes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type ServerScope struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   ServerScopeSpec   `json:"spec"`
	Status ServerScopeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerScopeList contains a list of ServerScopes
type ServerScopeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerScope `json:"items"`
}

// Repository type metadata.
var (
	ServerScope_Kind             = "ServerScope"
	ServerScope_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerScope_Kind}.String()
	ServerScope_KindAPIVersion   = ServerScope_Kind + "." + CRDGroupVersion.String()
	ServerScope_GroupVersionKind = CRDGroupVersion.WithKind(ServerScope_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerScope{}, &ServerScopeList{})
}
