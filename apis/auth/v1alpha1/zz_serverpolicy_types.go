/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerPolicyObservation struct {

	// The ID of the Auth Server.
	AuthServerID *string `json:"authServerId,omitempty" tf:"auth_server_id,omitempty"`

	// The clients to whitelist the policy for. `[ALL_CLIENTS]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
	ClientWhitelist []*string `json:"clientWhitelist,omitempty" tf:"client_whitelist,omitempty"`

	// The description of the Auth Server Policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the Auth Server Policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Priority of the auth server policy
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ServerPolicyParameters struct {

	// The ID of the Auth Server.
	// +crossplane:generate:reference:type=github.com/healthcarecom/provider-okta/apis/auth/v1alpha1.Server
	// +crossplane:generate:reference:extractor=github.com/healthcarecom/provider-okta/apis/auth/v1alpha1.AuthServerID()
	// +kubebuilder:validation:Optional
	AuthServerID *string `json:"authServerId,omitempty" tf:"auth_server_id,omitempty"`

	// Reference to a Server in auth to populate authServerId.
	// +kubebuilder:validation:Optional
	AuthServerIDRef *v1.Reference `json:"authServerIdRef,omitempty" tf:"-"`

	// Selector for a Server in auth to populate authServerId.
	// +kubebuilder:validation:Optional
	AuthServerIDSelector *v1.Selector `json:"authServerIdSelector,omitempty" tf:"-"`

	// The clients to whitelist the policy for. `[ALL_CLIENTS]` is a special value that can be used to whitelist all clients, otherwise it is a list of client ids.
	// +kubebuilder:validation:Optional
	ClientWhitelist []*string `json:"clientWhitelist,omitempty" tf:"client_whitelist,omitempty"`

	// The description of the Auth Server Policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the Auth Server Policy.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Priority of the auth server policy
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// ServerPolicySpec defines the desired state of ServerPolicy
type ServerPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerPolicyParameters `json:"forProvider"`
}

// ServerPolicyStatus defines the observed state of ServerPolicy.
type ServerPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerPolicy is the Schema for the ServerPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type ServerPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientWhitelist)",message="clientWhitelist is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.description)",message="description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.priority)",message="priority is a required parameter"
	Spec   ServerPolicySpec   `json:"spec"`
	Status ServerPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerPolicyList contains a list of ServerPolicys
type ServerPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerPolicy `json:"items"`
}

// Repository type metadata.
var (
	ServerPolicy_Kind             = "ServerPolicy"
	ServerPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerPolicy_Kind}.String()
	ServerPolicy_KindAPIVersion   = ServerPolicy_Kind + "." + CRDGroupVersion.String()
	ServerPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ServerPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerPolicy{}, &ServerPolicyList{})
}
