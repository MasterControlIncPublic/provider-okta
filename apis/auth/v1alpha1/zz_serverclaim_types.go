/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerClaimObservation struct {

	// Specifies whether to include claims in token, by default it is set to `true`.
	AlwaysIncludeInToken *bool `json:"alwaysIncludeInToken,omitempty" tf:"always_include_in_token,omitempty"`

	// Auth server ID
	AuthServerID *string `json:"authServerId,omitempty" tf:"auth_server_id,omitempty"`

	// Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
	ClaimType *string `json:"claimType,omitempty" tf:"claim_type,omitempty"`

	// Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
	GroupFilterType *string `json:"groupFilterType,omitempty" tf:"group_filter_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Auth server claim name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Auth server claim list of scopes
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The value of the claim.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
	ValueType *string `json:"valueType,omitempty" tf:"value_type,omitempty"`
}

type ServerClaimParameters struct {

	// Specifies whether to include claims in token, by default it is set to `true`.
	// +kubebuilder:validation:Optional
	AlwaysIncludeInToken *bool `json:"alwaysIncludeInToken,omitempty" tf:"always_include_in_token,omitempty"`

	// Auth server ID
	// +crossplane:generate:reference:type=github.com/healthcarecom/provider-okta/apis/auth/v1alpha1.Server
	// +crossplane:generate:reference:extractor=github.com/healthcarecom/provider-okta/apis/auth/v1alpha1.AuthServerID()
	// +kubebuilder:validation:Optional
	AuthServerID *string `json:"authServerId,omitempty" tf:"auth_server_id,omitempty"`

	// Reference to a Server in auth to populate authServerId.
	// +kubebuilder:validation:Optional
	AuthServerIDRef *v1.Reference `json:"authServerIdRef,omitempty" tf:"-"`

	// Selector for a Server in auth to populate authServerId.
	// +kubebuilder:validation:Optional
	AuthServerIDSelector *v1.Selector `json:"authServerIdSelector,omitempty" tf:"-"`

	// Specifies whether the claim is for an access token `RESOURCE` or ID token `IDENTITY`.
	// +kubebuilder:validation:Optional
	ClaimType *string `json:"claimType,omitempty" tf:"claim_type,omitempty"`

	// Specifies the type of group filter if `value_type` is `GROUPS`. Can be set to one of the following `STARTS_WITH`, `EQUALS`, `CONTAINS`, `REGEX`.
	// +kubebuilder:validation:Optional
	GroupFilterType *string `json:"groupFilterType,omitempty" tf:"group_filter_type,omitempty"`

	// Auth server claim name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Auth server claim list of scopes
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The value of the claim.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// The type of value of the claim. It can be set to `EXPRESSION` or `GROUPS`. It defaults to `EXPRESSION`.
	// +kubebuilder:validation:Optional
	ValueType *string `json:"valueType,omitempty" tf:"value_type,omitempty"`
}

// ServerClaimSpec defines the desired state of ServerClaim
type ServerClaimSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerClaimParameters `json:"forProvider"`
}

// ServerClaimStatus defines the observed state of ServerClaim.
type ServerClaimStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerClaimObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerClaim is the Schema for the ServerClaims API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type ServerClaim struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.claimType)",message="claimType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.value)",message="value is a required parameter"
	Spec   ServerClaimSpec   `json:"spec"`
	Status ServerClaimStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerClaimList contains a list of ServerClaims
type ServerClaimList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerClaim `json:"items"`
}

// Repository type metadata.
var (
	ServerClaim_Kind             = "ServerClaim"
	ServerClaim_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerClaim_Kind}.String()
	ServerClaim_KindAPIVersion   = ServerClaim_Kind + "." + CRDGroupVersion.String()
	ServerClaim_GroupVersionKind = CRDGroupVersion.WithKind(ServerClaim_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerClaim{}, &ServerClaimList{})
}
