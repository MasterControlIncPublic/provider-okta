//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PasswordHashObservation) DeepCopyInto(out *PasswordHashObservation) {
	*out = *in
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.Salt != nil {
		in, out := &in.Salt, &out.Salt
		*out = new(string)
		**out = **in
	}
	if in.SaltOrder != nil {
		in, out := &in.SaltOrder, &out.SaltOrder
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	if in.WorkFactor != nil {
		in, out := &in.WorkFactor, &out.WorkFactor
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PasswordHashObservation.
func (in *PasswordHashObservation) DeepCopy() *PasswordHashObservation {
	if in == nil {
		return nil
	}
	out := new(PasswordHashObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PasswordHashParameters) DeepCopyInto(out *PasswordHashParameters) {
	*out = *in
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.Salt != nil {
		in, out := &in.Salt, &out.Salt
		*out = new(string)
		**out = **in
	}
	if in.SaltOrder != nil {
		in, out := &in.SaltOrder, &out.SaltOrder
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	if in.WorkFactor != nil {
		in, out := &in.WorkFactor, &out.WorkFactor
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PasswordHashParameters.
func (in *PasswordHashParameters) DeepCopy() *PasswordHashParameters {
	if in == nil {
		return nil
	}
	out := new(PasswordHashParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *User) DeepCopyInto(out *User) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new User.
func (in *User) DeepCopy() *User {
	if in == nil {
		return nil
	}
	out := new(User)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *User) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserList) DeepCopyInto(out *UserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]User, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserList.
func (in *UserList) DeepCopy() *UserList {
	if in == nil {
		return nil
	}
	out := new(UserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserObservation) DeepCopyInto(out *UserObservation) {
	*out = *in
	if in.City != nil {
		in, out := &in.City, &out.City
		*out = new(string)
		**out = **in
	}
	if in.CostCenter != nil {
		in, out := &in.CostCenter, &out.CostCenter
		*out = new(string)
		**out = **in
	}
	if in.CountryCode != nil {
		in, out := &in.CountryCode, &out.CountryCode
		*out = new(string)
		**out = **in
	}
	if in.CustomProfileAttributes != nil {
		in, out := &in.CustomProfileAttributes, &out.CustomProfileAttributes
		*out = new(string)
		**out = **in
	}
	if in.CustomProfileAttributesToIgnore != nil {
		in, out := &in.CustomProfileAttributesToIgnore, &out.CustomProfileAttributesToIgnore
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Department != nil {
		in, out := &in.Department, &out.Department
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Division != nil {
		in, out := &in.Division, &out.Division
		*out = new(string)
		**out = **in
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = new(string)
		**out = **in
	}
	if in.EmployeeNumber != nil {
		in, out := &in.EmployeeNumber, &out.EmployeeNumber
		*out = new(string)
		**out = **in
	}
	if in.ExpirePasswordOnCreate != nil {
		in, out := &in.ExpirePasswordOnCreate, &out.ExpirePasswordOnCreate
		*out = new(bool)
		**out = **in
	}
	if in.FirstName != nil {
		in, out := &in.FirstName, &out.FirstName
		*out = new(string)
		**out = **in
	}
	if in.HonorificPrefix != nil {
		in, out := &in.HonorificPrefix, &out.HonorificPrefix
		*out = new(string)
		**out = **in
	}
	if in.HonorificSuffix != nil {
		in, out := &in.HonorificSuffix, &out.HonorificSuffix
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LastName != nil {
		in, out := &in.LastName, &out.LastName
		*out = new(string)
		**out = **in
	}
	if in.Locale != nil {
		in, out := &in.Locale, &out.Locale
		*out = new(string)
		**out = **in
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(string)
		**out = **in
	}
	if in.Manager != nil {
		in, out := &in.Manager, &out.Manager
		*out = new(string)
		**out = **in
	}
	if in.ManagerID != nil {
		in, out := &in.ManagerID, &out.ManagerID
		*out = new(string)
		**out = **in
	}
	if in.MiddleName != nil {
		in, out := &in.MiddleName, &out.MiddleName
		*out = new(string)
		**out = **in
	}
	if in.MobilePhone != nil {
		in, out := &in.MobilePhone, &out.MobilePhone
		*out = new(string)
		**out = **in
	}
	if in.NickName != nil {
		in, out := &in.NickName, &out.NickName
		*out = new(string)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.PasswordHash != nil {
		in, out := &in.PasswordHash, &out.PasswordHash
		*out = make([]PasswordHashObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordInlineHook != nil {
		in, out := &in.PasswordInlineHook, &out.PasswordInlineHook
		*out = new(string)
		**out = **in
	}
	if in.PostalAddress != nil {
		in, out := &in.PostalAddress, &out.PostalAddress
		*out = new(string)
		**out = **in
	}
	if in.PreferredLanguage != nil {
		in, out := &in.PreferredLanguage, &out.PreferredLanguage
		*out = new(string)
		**out = **in
	}
	if in.PrimaryPhone != nil {
		in, out := &in.PrimaryPhone, &out.PrimaryPhone
		*out = new(string)
		**out = **in
	}
	if in.ProfileURL != nil {
		in, out := &in.ProfileURL, &out.ProfileURL
		*out = new(string)
		**out = **in
	}
	if in.RawStatus != nil {
		in, out := &in.RawStatus, &out.RawStatus
		*out = new(string)
		**out = **in
	}
	if in.RecoveryQuestion != nil {
		in, out := &in.RecoveryQuestion, &out.RecoveryQuestion
		*out = new(string)
		**out = **in
	}
	if in.SecondEmail != nil {
		in, out := &in.SecondEmail, &out.SecondEmail
		*out = new(string)
		**out = **in
	}
	if in.SkipRoles != nil {
		in, out := &in.SkipRoles, &out.SkipRoles
		*out = new(bool)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UserType != nil {
		in, out := &in.UserType, &out.UserType
		*out = new(string)
		**out = **in
	}
	if in.ZipCode != nil {
		in, out := &in.ZipCode, &out.ZipCode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserObservation.
func (in *UserObservation) DeepCopy() *UserObservation {
	if in == nil {
		return nil
	}
	out := new(UserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserParameters) DeepCopyInto(out *UserParameters) {
	*out = *in
	if in.City != nil {
		in, out := &in.City, &out.City
		*out = new(string)
		**out = **in
	}
	if in.CostCenter != nil {
		in, out := &in.CostCenter, &out.CostCenter
		*out = new(string)
		**out = **in
	}
	if in.CountryCode != nil {
		in, out := &in.CountryCode, &out.CountryCode
		*out = new(string)
		**out = **in
	}
	if in.CustomProfileAttributes != nil {
		in, out := &in.CustomProfileAttributes, &out.CustomProfileAttributes
		*out = new(string)
		**out = **in
	}
	if in.CustomProfileAttributesToIgnore != nil {
		in, out := &in.CustomProfileAttributesToIgnore, &out.CustomProfileAttributesToIgnore
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Department != nil {
		in, out := &in.Department, &out.Department
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Division != nil {
		in, out := &in.Division, &out.Division
		*out = new(string)
		**out = **in
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		*out = new(string)
		**out = **in
	}
	if in.EmployeeNumber != nil {
		in, out := &in.EmployeeNumber, &out.EmployeeNumber
		*out = new(string)
		**out = **in
	}
	if in.ExpirePasswordOnCreate != nil {
		in, out := &in.ExpirePasswordOnCreate, &out.ExpirePasswordOnCreate
		*out = new(bool)
		**out = **in
	}
	if in.FirstName != nil {
		in, out := &in.FirstName, &out.FirstName
		*out = new(string)
		**out = **in
	}
	if in.HonorificPrefix != nil {
		in, out := &in.HonorificPrefix, &out.HonorificPrefix
		*out = new(string)
		**out = **in
	}
	if in.HonorificSuffix != nil {
		in, out := &in.HonorificSuffix, &out.HonorificSuffix
		*out = new(string)
		**out = **in
	}
	if in.LastName != nil {
		in, out := &in.LastName, &out.LastName
		*out = new(string)
		**out = **in
	}
	if in.Locale != nil {
		in, out := &in.Locale, &out.Locale
		*out = new(string)
		**out = **in
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(string)
		**out = **in
	}
	if in.Manager != nil {
		in, out := &in.Manager, &out.Manager
		*out = new(string)
		**out = **in
	}
	if in.ManagerID != nil {
		in, out := &in.ManagerID, &out.ManagerID
		*out = new(string)
		**out = **in
	}
	if in.MiddleName != nil {
		in, out := &in.MiddleName, &out.MiddleName
		*out = new(string)
		**out = **in
	}
	if in.MobilePhone != nil {
		in, out := &in.MobilePhone, &out.MobilePhone
		*out = new(string)
		**out = **in
	}
	if in.NickName != nil {
		in, out := &in.NickName, &out.NickName
		*out = new(string)
		**out = **in
	}
	if in.OldPasswordSecretRef != nil {
		in, out := &in.OldPasswordSecretRef, &out.OldPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		*out = new(string)
		**out = **in
	}
	if in.PasswordHash != nil {
		in, out := &in.PasswordHash, &out.PasswordHash
		*out = make([]PasswordHashParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordInlineHook != nil {
		in, out := &in.PasswordInlineHook, &out.PasswordInlineHook
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PostalAddress != nil {
		in, out := &in.PostalAddress, &out.PostalAddress
		*out = new(string)
		**out = **in
	}
	if in.PreferredLanguage != nil {
		in, out := &in.PreferredLanguage, &out.PreferredLanguage
		*out = new(string)
		**out = **in
	}
	if in.PrimaryPhone != nil {
		in, out := &in.PrimaryPhone, &out.PrimaryPhone
		*out = new(string)
		**out = **in
	}
	if in.ProfileURL != nil {
		in, out := &in.ProfileURL, &out.ProfileURL
		*out = new(string)
		**out = **in
	}
	if in.RecoveryAnswerSecretRef != nil {
		in, out := &in.RecoveryAnswerSecretRef, &out.RecoveryAnswerSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.RecoveryQuestion != nil {
		in, out := &in.RecoveryQuestion, &out.RecoveryQuestion
		*out = new(string)
		**out = **in
	}
	if in.SecondEmail != nil {
		in, out := &in.SecondEmail, &out.SecondEmail
		*out = new(string)
		**out = **in
	}
	if in.SkipRoles != nil {
		in, out := &in.SkipRoles, &out.SkipRoles
		*out = new(bool)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		*out = new(string)
		**out = **in
	}
	if in.UserType != nil {
		in, out := &in.UserType, &out.UserType
		*out = new(string)
		**out = **in
	}
	if in.ZipCode != nil {
		in, out := &in.ZipCode, &out.ZipCode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserParameters.
func (in *UserParameters) DeepCopy() *UserParameters {
	if in == nil {
		return nil
	}
	out := new(UserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSpec) DeepCopyInto(out *UserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSpec.
func (in *UserSpec) DeepCopy() *UserSpec {
	if in == nil {
		return nil
	}
	out := new(UserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserStatus) DeepCopyInto(out *UserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserStatus.
func (in *UserStatus) DeepCopy() *UserStatus {
	if in == nil {
		return nil
	}
	out := new(UserStatus)
	in.DeepCopyInto(out)
	return out
}
