/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BaseSchemaPropertyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Subschema unique string identifier
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// SubSchema profile manager, if not set it will inherit its setting.
	Master *string `json:"master,omitempty" tf:"master,omitempty"`

	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// SubSchema permissions: HIDE, READ_ONLY, or READ_WRITE.
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// Whether the subschema is required
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Subschema title (display name)
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// Subschema type: string, boolean, number, integer, array, or object
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Custom subschema user type
	UserType *string `json:"userType,omitempty" tf:"user_type,omitempty"`
}

type BaseSchemaPropertyParameters struct {

	// Subschema unique string identifier
	// +kubebuilder:validation:Optional
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// SubSchema profile manager, if not set it will inherit its setting.
	// +kubebuilder:validation:Optional
	Master *string `json:"master,omitempty" tf:"master,omitempty"`

	// The validation pattern to use for the subschema. Must be in form of '.+', or '[<pattern>]+' if present.'
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// SubSchema permissions: HIDE, READ_ONLY, or READ_WRITE.
	// +kubebuilder:validation:Optional
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// Whether the subschema is required
	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Subschema title (display name)
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// Subschema type: string, boolean, number, integer, array, or object
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Custom subschema user type
	// +kubebuilder:validation:Optional
	UserType *string `json:"userType,omitempty" tf:"user_type,omitempty"`
}

// BaseSchemaPropertySpec defines the desired state of BaseSchemaProperty
type BaseSchemaPropertySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BaseSchemaPropertyParameters `json:"forProvider"`
}

// BaseSchemaPropertyStatus defines the observed state of BaseSchemaProperty.
type BaseSchemaPropertyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BaseSchemaPropertyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BaseSchemaProperty is the Schema for the BaseSchemaPropertys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type BaseSchemaProperty struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.index)",message="index is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.title)",message="title is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	Spec   BaseSchemaPropertySpec   `json:"spec"`
	Status BaseSchemaPropertyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BaseSchemaPropertyList contains a list of BaseSchemaPropertys
type BaseSchemaPropertyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BaseSchemaProperty `json:"items"`
}

// Repository type metadata.
var (
	BaseSchemaProperty_Kind             = "BaseSchemaProperty"
	BaseSchemaProperty_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BaseSchemaProperty_Kind}.String()
	BaseSchemaProperty_KindAPIVersion   = BaseSchemaProperty_Kind + "." + CRDGroupVersion.String()
	BaseSchemaProperty_GroupVersionKind = CRDGroupVersion.WithKind(BaseSchemaProperty_Kind)
)

func init() {
	SchemeBuilder.Register(&BaseSchemaProperty{}, &BaseSchemaPropertyList{})
}
