/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SAMLAppSettingsObservation struct {

	// Application ID
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Application settings in JSON format
	Settings *string `json:"settings,omitempty" tf:"settings,omitempty"`
}

type SAMLAppSettingsParameters struct {

	// Application ID
	// +crossplane:generate:reference:type=github.com/healthcarecom/provider-okta/apis/app/v1alpha1.SAML
	// +crossplane:generate:reference:extractor=github.com/healthcarecom/provider-okta/apis/app/v1alpha1.SamlID()
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// Reference to a SAML in app to populate appId.
	// +kubebuilder:validation:Optional
	AppIDRef *v1.Reference `json:"appIdRef,omitempty" tf:"-"`

	// Selector for a SAML in app to populate appId.
	// +kubebuilder:validation:Optional
	AppIDSelector *v1.Selector `json:"appIdSelector,omitempty" tf:"-"`

	// Application settings in JSON format
	// +kubebuilder:validation:Optional
	Settings *string `json:"settings,omitempty" tf:"settings,omitempty"`
}

// SAMLAppSettingsSpec defines the desired state of SAMLAppSettings
type SAMLAppSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SAMLAppSettingsParameters `json:"forProvider"`
}

// SAMLAppSettingsStatus defines the observed state of SAMLAppSettings.
type SAMLAppSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SAMLAppSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SAMLAppSettings is the Schema for the SAMLAppSettingss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type SAMLAppSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.settings)",message="settings is a required parameter"
	Spec   SAMLAppSettingsSpec   `json:"spec"`
	Status SAMLAppSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SAMLAppSettingsList contains a list of SAMLAppSettingss
type SAMLAppSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SAMLAppSettings `json:"items"`
}

// Repository type metadata.
var (
	SAMLAppSettings_Kind             = "SAMLAppSettings"
	SAMLAppSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SAMLAppSettings_Kind}.String()
	SAMLAppSettings_KindAPIVersion   = SAMLAppSettings_Kind + "." + CRDGroupVersion.String()
	SAMLAppSettings_GroupVersionKind = CRDGroupVersion.WithKind(SAMLAppSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&SAMLAppSettings{}, &SAMLAppSettingsList{})
}
