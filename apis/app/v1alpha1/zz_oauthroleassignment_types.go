/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OauthRoleAssignmentObservation struct {

	// Client ID for the role to be assigned to
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Label of the role assignment
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Resource set for the custom role to assign, must be the ID of the created resource set.
	ResourceSet *string `json:"resourceSet,omitempty" tf:"resource_set,omitempty"`

	// Custom Role ID
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Status of the role assignment
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OauthRoleAssignmentParameters struct {

	// Client ID for the role to be assigned to
	// +crossplane:generate:reference:type=github.com/healthcarecom/provider-okta/apis/app/v1alpha1.Oauth
	// +crossplane:generate:reference:extractor=github.com/healthcarecom/provider-okta/apis/app/v1alpha1.OauthClientID()
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Reference to a Oauth in app to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDRef *v1.Reference `json:"clientIdRef,omitempty" tf:"-"`

	// Selector for a Oauth in app to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDSelector *v1.Selector `json:"clientIdSelector,omitempty" tf:"-"`

	// Resource set for the custom role to assign, must be the ID of the created resource set.
	// +kubebuilder:validation:Optional
	ResourceSet *string `json:"resourceSet,omitempty" tf:"resource_set,omitempty"`

	// Custom Role ID
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Role type to assign. This can be one of the standard Okta roles, such as `HELP_DESK_ADMIN`, or `CUSTOM`. Using custom requires the `resource_set` and `role` attributes to be set.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// OauthRoleAssignmentSpec defines the desired state of OauthRoleAssignment
type OauthRoleAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OauthRoleAssignmentParameters `json:"forProvider"`
}

// OauthRoleAssignmentStatus defines the observed state of OauthRoleAssignment.
type OauthRoleAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OauthRoleAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OauthRoleAssignment is the Schema for the OauthRoleAssignments API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type OauthRoleAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	Spec   OauthRoleAssignmentSpec   `json:"spec"`
	Status OauthRoleAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OauthRoleAssignmentList contains a list of OauthRoleAssignments
type OauthRoleAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OauthRoleAssignment `json:"items"`
}

// Repository type metadata.
var (
	OauthRoleAssignment_Kind             = "OauthRoleAssignment"
	OauthRoleAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OauthRoleAssignment_Kind}.String()
	OauthRoleAssignment_KindAPIVersion   = OauthRoleAssignment_Kind + "." + CRDGroupVersion.String()
	OauthRoleAssignment_GroupVersionKind = CRDGroupVersion.WithKind(OauthRoleAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&OauthRoleAssignment{}, &OauthRoleAssignmentList{})
}
