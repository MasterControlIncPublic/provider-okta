/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OauthAPIScopeObservation struct {

	// ID of the application.
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The issuer of your Org Authorization Server, your Org URL.
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// Scopes of the application for which consent is granted.
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

type OauthAPIScopeParameters struct {

	// ID of the application.
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// The issuer of your Org Authorization Server, your Org URL.
	// +kubebuilder:validation:Optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// Scopes of the application for which consent is granted.
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

// OauthAPIScopeSpec defines the desired state of OauthAPIScope
type OauthAPIScopeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OauthAPIScopeParameters `json:"forProvider"`
}

// OauthAPIScopeStatus defines the observed state of OauthAPIScope.
type OauthAPIScopeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OauthAPIScopeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OauthAPIScope is the Schema for the OauthAPIScopes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type OauthAPIScope struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.appId)",message="appId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.issuer)",message="issuer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.scopes)",message="scopes is a required parameter"
	Spec   OauthAPIScopeSpec   `json:"spec"`
	Status OauthAPIScopeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OauthAPIScopeList contains a list of OauthAPIScopes
type OauthAPIScopeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OauthAPIScope `json:"items"`
}

// Repository type metadata.
var (
	OauthAPIScope_Kind             = "OauthAPIScope"
	OauthAPIScope_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OauthAPIScope_Kind}.String()
	OauthAPIScope_KindAPIVersion   = OauthAPIScope_Kind + "." + CRDGroupVersion.String()
	OauthAPIScope_GroupVersionKind = CRDGroupVersion.WithKind(OauthAPIScope_Kind)
)

func init() {
	SchemeBuilder.Register(&OauthAPIScope{}, &OauthAPIScopeList{})
}
