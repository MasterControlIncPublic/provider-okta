/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessPolicyAssignmentObservation struct {

	// The application ID; this value is immutable and can not be updated.
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The access policy ID.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`
}

type AccessPolicyAssignmentParameters struct {

	// The application ID; this value is immutable and can not be updated.
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// The access policy ID.
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`
}

// AccessPolicyAssignmentSpec defines the desired state of AccessPolicyAssignment
type AccessPolicyAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessPolicyAssignmentParameters `json:"forProvider"`
}

// AccessPolicyAssignmentStatus defines the observed state of AccessPolicyAssignment.
type AccessPolicyAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessPolicyAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessPolicyAssignment is the Schema for the AccessPolicyAssignments API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type AccessPolicyAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.appId)",message="appId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.policyId)",message="policyId is a required parameter"
	Spec   AccessPolicyAssignmentSpec   `json:"spec"`
	Status AccessPolicyAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessPolicyAssignmentList contains a list of AccessPolicyAssignments
type AccessPolicyAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessPolicyAssignment `json:"items"`
}

// Repository type metadata.
var (
	AccessPolicyAssignment_Kind             = "AccessPolicyAssignment"
	AccessPolicyAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessPolicyAssignment_Kind}.String()
	AccessPolicyAssignment_KindAPIVersion   = AccessPolicyAssignment_Kind + "." + CRDGroupVersion.String()
	AccessPolicyAssignment_GroupVersionKind = CRDGroupVersion.WithKind(AccessPolicyAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessPolicyAssignment{}, &AccessPolicyAssignmentList{})
}
