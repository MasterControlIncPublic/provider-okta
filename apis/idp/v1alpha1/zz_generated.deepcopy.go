//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Oidc) DeepCopyInto(out *Oidc) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Oidc.
func (in *Oidc) DeepCopy() *Oidc {
	if in == nil {
		return nil
	}
	out := new(Oidc)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Oidc) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OidcList) DeepCopyInto(out *OidcList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Oidc, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OidcList.
func (in *OidcList) DeepCopy() *OidcList {
	if in == nil {
		return nil
	}
	out := new(OidcList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OidcList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OidcObservation) DeepCopyInto(out *OidcObservation) {
	*out = *in
	if in.AccountLinkAction != nil {
		in, out := &in.AccountLinkAction, &out.AccountLinkAction
		*out = new(string)
		**out = **in
	}
	if in.AccountLinkGroupInclude != nil {
		in, out := &in.AccountLinkGroupInclude, &out.AccountLinkGroupInclude
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AuthorizationBinding != nil {
		in, out := &in.AuthorizationBinding, &out.AuthorizationBinding
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationURL != nil {
		in, out := &in.AuthorizationURL, &out.AuthorizationURL
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.DeprovisionedAction != nil {
		in, out := &in.DeprovisionedAction, &out.DeprovisionedAction
		*out = new(string)
		**out = **in
	}
	if in.GroupsAction != nil {
		in, out := &in.GroupsAction, &out.GroupsAction
		*out = new(string)
		**out = **in
	}
	if in.GroupsAssignment != nil {
		in, out := &in.GroupsAssignment, &out.GroupsAssignment
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupsAttribute != nil {
		in, out := &in.GroupsAttribute, &out.GroupsAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupsFilter != nil {
		in, out := &in.GroupsFilter, &out.GroupsFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IssuerMode != nil {
		in, out := &in.IssuerMode, &out.IssuerMode
		*out = new(string)
		**out = **in
	}
	if in.IssuerURL != nil {
		in, out := &in.IssuerURL, &out.IssuerURL
		*out = new(string)
		**out = **in
	}
	if in.JwksBinding != nil {
		in, out := &in.JwksBinding, &out.JwksBinding
		*out = new(string)
		**out = **in
	}
	if in.JwksURL != nil {
		in, out := &in.JwksURL, &out.JwksURL
		*out = new(string)
		**out = **in
	}
	if in.MaxClockSkew != nil {
		in, out := &in.MaxClockSkew, &out.MaxClockSkew
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProfileMaster != nil {
		in, out := &in.ProfileMaster, &out.ProfileMaster
		*out = new(bool)
		**out = **in
	}
	if in.ProtocolType != nil {
		in, out := &in.ProtocolType, &out.ProtocolType
		*out = new(string)
		**out = **in
	}
	if in.ProvisioningAction != nil {
		in, out := &in.ProvisioningAction, &out.ProvisioningAction
		*out = new(string)
		**out = **in
	}
	if in.RequestSignatureAlgorithm != nil {
		in, out := &in.RequestSignatureAlgorithm, &out.RequestSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.RequestSignatureScope != nil {
		in, out := &in.RequestSignatureScope, &out.RequestSignatureScope
		*out = new(string)
		**out = **in
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubjectMatchAttribute != nil {
		in, out := &in.SubjectMatchAttribute, &out.SubjectMatchAttribute
		*out = new(string)
		**out = **in
	}
	if in.SubjectMatchType != nil {
		in, out := &in.SubjectMatchType, &out.SubjectMatchType
		*out = new(string)
		**out = **in
	}
	if in.SuspendedAction != nil {
		in, out := &in.SuspendedAction, &out.SuspendedAction
		*out = new(string)
		**out = **in
	}
	if in.TokenBinding != nil {
		in, out := &in.TokenBinding, &out.TokenBinding
		*out = new(string)
		**out = **in
	}
	if in.TokenURL != nil {
		in, out := &in.TokenURL, &out.TokenURL
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UserInfoBinding != nil {
		in, out := &in.UserInfoBinding, &out.UserInfoBinding
		*out = new(string)
		**out = **in
	}
	if in.UserInfoURL != nil {
		in, out := &in.UserInfoURL, &out.UserInfoURL
		*out = new(string)
		**out = **in
	}
	if in.UserTypeID != nil {
		in, out := &in.UserTypeID, &out.UserTypeID
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OidcObservation.
func (in *OidcObservation) DeepCopy() *OidcObservation {
	if in == nil {
		return nil
	}
	out := new(OidcObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OidcParameters) DeepCopyInto(out *OidcParameters) {
	*out = *in
	if in.AccountLinkAction != nil {
		in, out := &in.AccountLinkAction, &out.AccountLinkAction
		*out = new(string)
		**out = **in
	}
	if in.AccountLinkGroupInclude != nil {
		in, out := &in.AccountLinkGroupInclude, &out.AccountLinkGroupInclude
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AuthorizationBinding != nil {
		in, out := &in.AuthorizationBinding, &out.AuthorizationBinding
		*out = new(string)
		**out = **in
	}
	if in.AuthorizationURL != nil {
		in, out := &in.AuthorizationURL, &out.AuthorizationURL
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.DeprovisionedAction != nil {
		in, out := &in.DeprovisionedAction, &out.DeprovisionedAction
		*out = new(string)
		**out = **in
	}
	if in.GroupsAction != nil {
		in, out := &in.GroupsAction, &out.GroupsAction
		*out = new(string)
		**out = **in
	}
	if in.GroupsAssignment != nil {
		in, out := &in.GroupsAssignment, &out.GroupsAssignment
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupsAttribute != nil {
		in, out := &in.GroupsAttribute, &out.GroupsAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupsFilter != nil {
		in, out := &in.GroupsFilter, &out.GroupsFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IssuerMode != nil {
		in, out := &in.IssuerMode, &out.IssuerMode
		*out = new(string)
		**out = **in
	}
	if in.IssuerURL != nil {
		in, out := &in.IssuerURL, &out.IssuerURL
		*out = new(string)
		**out = **in
	}
	if in.JwksBinding != nil {
		in, out := &in.JwksBinding, &out.JwksBinding
		*out = new(string)
		**out = **in
	}
	if in.JwksURL != nil {
		in, out := &in.JwksURL, &out.JwksURL
		*out = new(string)
		**out = **in
	}
	if in.MaxClockSkew != nil {
		in, out := &in.MaxClockSkew, &out.MaxClockSkew
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProfileMaster != nil {
		in, out := &in.ProfileMaster, &out.ProfileMaster
		*out = new(bool)
		**out = **in
	}
	if in.ProtocolType != nil {
		in, out := &in.ProtocolType, &out.ProtocolType
		*out = new(string)
		**out = **in
	}
	if in.ProvisioningAction != nil {
		in, out := &in.ProvisioningAction, &out.ProvisioningAction
		*out = new(string)
		**out = **in
	}
	if in.RequestSignatureAlgorithm != nil {
		in, out := &in.RequestSignatureAlgorithm, &out.RequestSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.RequestSignatureScope != nil {
		in, out := &in.RequestSignatureScope, &out.RequestSignatureScope
		*out = new(string)
		**out = **in
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubjectMatchAttribute != nil {
		in, out := &in.SubjectMatchAttribute, &out.SubjectMatchAttribute
		*out = new(string)
		**out = **in
	}
	if in.SubjectMatchType != nil {
		in, out := &in.SubjectMatchType, &out.SubjectMatchType
		*out = new(string)
		**out = **in
	}
	if in.SuspendedAction != nil {
		in, out := &in.SuspendedAction, &out.SuspendedAction
		*out = new(string)
		**out = **in
	}
	if in.TokenBinding != nil {
		in, out := &in.TokenBinding, &out.TokenBinding
		*out = new(string)
		**out = **in
	}
	if in.TokenURL != nil {
		in, out := &in.TokenURL, &out.TokenURL
		*out = new(string)
		**out = **in
	}
	if in.UserInfoBinding != nil {
		in, out := &in.UserInfoBinding, &out.UserInfoBinding
		*out = new(string)
		**out = **in
	}
	if in.UserInfoURL != nil {
		in, out := &in.UserInfoURL, &out.UserInfoURL
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OidcParameters.
func (in *OidcParameters) DeepCopy() *OidcParameters {
	if in == nil {
		return nil
	}
	out := new(OidcParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OidcSpec) DeepCopyInto(out *OidcSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OidcSpec.
func (in *OidcSpec) DeepCopy() *OidcSpec {
	if in == nil {
		return nil
	}
	out := new(OidcSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OidcStatus) DeepCopyInto(out *OidcStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OidcStatus.
func (in *OidcStatus) DeepCopy() *OidcStatus {
	if in == nil {
		return nil
	}
	out := new(OidcStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAML) DeepCopyInto(out *SAML) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAML.
func (in *SAML) DeepCopy() *SAML {
	if in == nil {
		return nil
	}
	out := new(SAML)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SAML) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLList) DeepCopyInto(out *SAMLList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SAML, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLList.
func (in *SAMLList) DeepCopy() *SAMLList {
	if in == nil {
		return nil
	}
	out := new(SAMLList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SAMLList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLObservation) DeepCopyInto(out *SAMLObservation) {
	*out = *in
	if in.AccountLinkAction != nil {
		in, out := &in.AccountLinkAction, &out.AccountLinkAction
		*out = new(string)
		**out = **in
	}
	if in.AccountLinkGroupInclude != nil {
		in, out := &in.AccountLinkGroupInclude, &out.AccountLinkGroupInclude
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AcsBinding != nil {
		in, out := &in.AcsBinding, &out.AcsBinding
		*out = new(string)
		**out = **in
	}
	if in.AcsType != nil {
		in, out := &in.AcsType, &out.AcsType
		*out = new(string)
		**out = **in
	}
	if in.Audience != nil {
		in, out := &in.Audience, &out.Audience
		*out = new(string)
		**out = **in
	}
	if in.DeprovisionedAction != nil {
		in, out := &in.DeprovisionedAction, &out.DeprovisionedAction
		*out = new(string)
		**out = **in
	}
	if in.GroupsAction != nil {
		in, out := &in.GroupsAction, &out.GroupsAction
		*out = new(string)
		**out = **in
	}
	if in.GroupsAssignment != nil {
		in, out := &in.GroupsAssignment, &out.GroupsAssignment
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupsAttribute != nil {
		in, out := &in.GroupsAttribute, &out.GroupsAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupsFilter != nil {
		in, out := &in.GroupsFilter, &out.GroupsFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.IssuerMode != nil {
		in, out := &in.IssuerMode, &out.IssuerMode
		*out = new(string)
		**out = **in
	}
	if in.Kid != nil {
		in, out := &in.Kid, &out.Kid
		*out = new(string)
		**out = **in
	}
	if in.MaxClockSkew != nil {
		in, out := &in.MaxClockSkew, &out.MaxClockSkew
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameFormat != nil {
		in, out := &in.NameFormat, &out.NameFormat
		*out = new(string)
		**out = **in
	}
	if in.ProfileMaster != nil {
		in, out := &in.ProfileMaster, &out.ProfileMaster
		*out = new(bool)
		**out = **in
	}
	if in.ProvisioningAction != nil {
		in, out := &in.ProvisioningAction, &out.ProvisioningAction
		*out = new(string)
		**out = **in
	}
	if in.RequestSignatureAlgorithm != nil {
		in, out := &in.RequestSignatureAlgorithm, &out.RequestSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.RequestSignatureScope != nil {
		in, out := &in.RequestSignatureScope, &out.RequestSignatureScope
		*out = new(string)
		**out = **in
	}
	if in.ResponseSignatureAlgorithm != nil {
		in, out := &in.ResponseSignatureAlgorithm, &out.ResponseSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.ResponseSignatureScope != nil {
		in, out := &in.ResponseSignatureScope, &out.ResponseSignatureScope
		*out = new(string)
		**out = **in
	}
	if in.SsoBinding != nil {
		in, out := &in.SsoBinding, &out.SsoBinding
		*out = new(string)
		**out = **in
	}
	if in.SsoDestination != nil {
		in, out := &in.SsoDestination, &out.SsoDestination
		*out = new(string)
		**out = **in
	}
	if in.SsoURL != nil {
		in, out := &in.SsoURL, &out.SsoURL
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubjectFilter != nil {
		in, out := &in.SubjectFilter, &out.SubjectFilter
		*out = new(string)
		**out = **in
	}
	if in.SubjectFormat != nil {
		in, out := &in.SubjectFormat, &out.SubjectFormat
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubjectMatchAttribute != nil {
		in, out := &in.SubjectMatchAttribute, &out.SubjectMatchAttribute
		*out = new(string)
		**out = **in
	}
	if in.SubjectMatchType != nil {
		in, out := &in.SubjectMatchType, &out.SubjectMatchType
		*out = new(string)
		**out = **in
	}
	if in.SuspendedAction != nil {
		in, out := &in.SuspendedAction, &out.SuspendedAction
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UserTypeID != nil {
		in, out := &in.UserTypeID, &out.UserTypeID
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLObservation.
func (in *SAMLObservation) DeepCopy() *SAMLObservation {
	if in == nil {
		return nil
	}
	out := new(SAMLObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLParameters) DeepCopyInto(out *SAMLParameters) {
	*out = *in
	if in.AccountLinkAction != nil {
		in, out := &in.AccountLinkAction, &out.AccountLinkAction
		*out = new(string)
		**out = **in
	}
	if in.AccountLinkGroupInclude != nil {
		in, out := &in.AccountLinkGroupInclude, &out.AccountLinkGroupInclude
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AcsType != nil {
		in, out := &in.AcsType, &out.AcsType
		*out = new(string)
		**out = **in
	}
	if in.DeprovisionedAction != nil {
		in, out := &in.DeprovisionedAction, &out.DeprovisionedAction
		*out = new(string)
		**out = **in
	}
	if in.GroupsAction != nil {
		in, out := &in.GroupsAction, &out.GroupsAction
		*out = new(string)
		**out = **in
	}
	if in.GroupsAssignment != nil {
		in, out := &in.GroupsAssignment, &out.GroupsAssignment
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.GroupsAttribute != nil {
		in, out := &in.GroupsAttribute, &out.GroupsAttribute
		*out = new(string)
		**out = **in
	}
	if in.GroupsFilter != nil {
		in, out := &in.GroupsFilter, &out.GroupsFilter
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Issuer != nil {
		in, out := &in.Issuer, &out.Issuer
		*out = new(string)
		**out = **in
	}
	if in.IssuerMode != nil {
		in, out := &in.IssuerMode, &out.IssuerMode
		*out = new(string)
		**out = **in
	}
	if in.Kid != nil {
		in, out := &in.Kid, &out.Kid
		*out = new(string)
		**out = **in
	}
	if in.MaxClockSkew != nil {
		in, out := &in.MaxClockSkew, &out.MaxClockSkew
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NameFormat != nil {
		in, out := &in.NameFormat, &out.NameFormat
		*out = new(string)
		**out = **in
	}
	if in.ProfileMaster != nil {
		in, out := &in.ProfileMaster, &out.ProfileMaster
		*out = new(bool)
		**out = **in
	}
	if in.ProvisioningAction != nil {
		in, out := &in.ProvisioningAction, &out.ProvisioningAction
		*out = new(string)
		**out = **in
	}
	if in.RequestSignatureAlgorithm != nil {
		in, out := &in.RequestSignatureAlgorithm, &out.RequestSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.RequestSignatureScope != nil {
		in, out := &in.RequestSignatureScope, &out.RequestSignatureScope
		*out = new(string)
		**out = **in
	}
	if in.ResponseSignatureAlgorithm != nil {
		in, out := &in.ResponseSignatureAlgorithm, &out.ResponseSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.ResponseSignatureScope != nil {
		in, out := &in.ResponseSignatureScope, &out.ResponseSignatureScope
		*out = new(string)
		**out = **in
	}
	if in.SsoBinding != nil {
		in, out := &in.SsoBinding, &out.SsoBinding
		*out = new(string)
		**out = **in
	}
	if in.SsoDestination != nil {
		in, out := &in.SsoDestination, &out.SsoDestination
		*out = new(string)
		**out = **in
	}
	if in.SsoURL != nil {
		in, out := &in.SsoURL, &out.SsoURL
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubjectFilter != nil {
		in, out := &in.SubjectFilter, &out.SubjectFilter
		*out = new(string)
		**out = **in
	}
	if in.SubjectFormat != nil {
		in, out := &in.SubjectFormat, &out.SubjectFormat
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubjectMatchAttribute != nil {
		in, out := &in.SubjectMatchAttribute, &out.SubjectMatchAttribute
		*out = new(string)
		**out = **in
	}
	if in.SubjectMatchType != nil {
		in, out := &in.SubjectMatchType, &out.SubjectMatchType
		*out = new(string)
		**out = **in
	}
	if in.SuspendedAction != nil {
		in, out := &in.SuspendedAction, &out.SuspendedAction
		*out = new(string)
		**out = **in
	}
	if in.UsernameTemplate != nil {
		in, out := &in.UsernameTemplate, &out.UsernameTemplate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLParameters.
func (in *SAMLParameters) DeepCopy() *SAMLParameters {
	if in == nil {
		return nil
	}
	out := new(SAMLParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLSpec) DeepCopyInto(out *SAMLSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLSpec.
func (in *SAMLSpec) DeepCopy() *SAMLSpec {
	if in == nil {
		return nil
	}
	out := new(SAMLSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SAMLStatus) DeepCopyInto(out *SAMLStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SAMLStatus.
func (in *SAMLStatus) DeepCopy() *SAMLStatus {
	if in == nil {
		return nil
	}
	out := new(SAMLStatus)
	in.DeepCopyInto(out)
	return out
}
