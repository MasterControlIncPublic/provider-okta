/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleObservation struct {
	ExpressionType *string `json:"expressionType,omitempty" tf:"expression_type,omitempty"`

	ExpressionValue *string `json:"expressionValue,omitempty" tf:"expression_value,omitempty"`

	GroupAssignments []*string `json:"groupAssignments,omitempty" tf:"group_assignments,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Remove users added by this rule from the assigned group after deleting this resource
	RemoveAssignedUsers *bool `json:"removeAssignedUsers,omitempty" tf:"remove_assigned_users,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The list of user IDs that would be excluded when rules are processed
	UsersExcluded []*string `json:"usersExcluded,omitempty" tf:"users_excluded,omitempty"`
}

type RuleParameters struct {

	// +kubebuilder:validation:Optional
	ExpressionType *string `json:"expressionType,omitempty" tf:"expression_type,omitempty"`

	// +kubebuilder:validation:Optional
	ExpressionValue *string `json:"expressionValue,omitempty" tf:"expression_value,omitempty"`

	// +crossplane:generate:reference:type=github.com/healthcarecom/provider-okta/apis/group/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/healthcarecom/provider-okta/apis/group/v1alpha1.GroupID()
	// +kubebuilder:validation:Optional
	GroupAssignments []*string `json:"groupAssignments,omitempty" tf:"group_assignments,omitempty"`

	// References to Group in group to populate groupAssignments.
	// +kubebuilder:validation:Optional
	GroupAssignmentsRefs []v1.Reference `json:"groupAssignmentsRefs,omitempty" tf:"-"`

	// Selector for a list of Group in group to populate groupAssignments.
	// +kubebuilder:validation:Optional
	GroupAssignmentsSelector *v1.Selector `json:"groupAssignmentsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Remove users added by this rule from the assigned group after deleting this resource
	// +kubebuilder:validation:Optional
	RemoveAssignedUsers *bool `json:"removeAssignedUsers,omitempty" tf:"remove_assigned_users,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The list of user IDs that would be excluded when rules are processed
	// +kubebuilder:validation:Optional
	UsersExcluded []*string `json:"usersExcluded,omitempty" tf:"users_excluded,omitempty"`
}

// RuleSpec defines the desired state of Rule
type RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleParameters `json:"forProvider"`
}

// RuleStatus defines the observed state of Rule.
type RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rule is the Schema for the Rules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,okta}
type Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.expressionValue)",message="expressionValue is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   RuleSpec   `json:"spec"`
	Status RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleList contains a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rule `json:"items"`
}

// Repository type metadata.
var (
	Rule_Kind             = "Rule"
	Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rule_Kind}.String()
	Rule_KindAPIVersion   = Rule_Kind + "." + CRDGroupVersion.String()
	Rule_GroupVersionKind = CRDGroupVersion.WithKind(Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&Rule{}, &RuleList{})
}
